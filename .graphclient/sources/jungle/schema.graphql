schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  trade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trade
  trades(
    skip: Int = 0
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    where: Trade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trade!]!
  volumeFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VolumeFee
  volumeFees(
    skip: Int = 0
    first: Int = 100
    orderBy: VolumeFee_orderBy
    orderDirection: OrderDirection
    where: VolumeFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VolumeFee!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  trade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trade
  trades(
    skip: Int = 0
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    where: Trade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trade!]!
  volumeFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VolumeFee
  volumeFees(
    skip: Int = 0
    first: Int = 100
    orderBy: VolumeFee_orderBy
    orderDirection: OrderDirection
    where: VolumeFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VolumeFee!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Trade {
  id: Bytes!
  account: Bytes!
  ledger: BigInt!
  currencyKey: String!
  amount: BigInt!
  keyPrice: BigInt!
  fee: BigInt!
  type: BigInt!
  totalVal: BigInt!
  timestamp: BigInt!
  eventid: String!
}

input Trade_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  ledger: BigInt
  ledger_not: BigInt
  ledger_gt: BigInt
  ledger_lt: BigInt
  ledger_gte: BigInt
  ledger_lte: BigInt
  ledger_in: [BigInt!]
  ledger_not_in: [BigInt!]
  currencyKey: String
  currencyKey_not: String
  currencyKey_gt: String
  currencyKey_lt: String
  currencyKey_gte: String
  currencyKey_lte: String
  currencyKey_in: [String!]
  currencyKey_not_in: [String!]
  currencyKey_contains: String
  currencyKey_contains_nocase: String
  currencyKey_not_contains: String
  currencyKey_not_contains_nocase: String
  currencyKey_starts_with: String
  currencyKey_starts_with_nocase: String
  currencyKey_not_starts_with: String
  currencyKey_not_starts_with_nocase: String
  currencyKey_ends_with: String
  currencyKey_ends_with_nocase: String
  currencyKey_not_ends_with: String
  currencyKey_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  keyPrice: BigInt
  keyPrice_not: BigInt
  keyPrice_gt: BigInt
  keyPrice_lt: BigInt
  keyPrice_gte: BigInt
  keyPrice_lte: BigInt
  keyPrice_in: [BigInt!]
  keyPrice_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  type: BigInt
  type_not: BigInt
  type_gt: BigInt
  type_lt: BigInt
  type_gte: BigInt
  type_lte: BigInt
  type_in: [BigInt!]
  type_not_in: [BigInt!]
  totalVal: BigInt
  totalVal_not: BigInt
  totalVal_gt: BigInt
  totalVal_lt: BigInt
  totalVal_gte: BigInt
  totalVal_lte: BigInt
  totalVal_in: [BigInt!]
  totalVal_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  eventid: String
  eventid_not: String
  eventid_gt: String
  eventid_lt: String
  eventid_gte: String
  eventid_lte: String
  eventid_in: [String!]
  eventid_not_in: [String!]
  eventid_contains: String
  eventid_contains_nocase: String
  eventid_not_contains: String
  eventid_not_contains_nocase: String
  eventid_starts_with: String
  eventid_starts_with_nocase: String
  eventid_not_starts_with: String
  eventid_not_starts_with_nocase: String
  eventid_ends_with: String
  eventid_ends_with_nocase: String
  eventid_not_ends_with: String
  eventid_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Trade_filter]
  or: [Trade_filter]
}

enum Trade_orderBy {
  id
  account
  ledger
  currencyKey
  amount
  keyPrice
  fee
  type
  totalVal
  timestamp
  eventid
}

type VolumeFee {
  id: Bytes!
  ledger: BigInt!
  vol: BigInt!
  fee: BigInt!
  date: String!
}

input VolumeFee_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  ledger: BigInt
  ledger_not: BigInt
  ledger_gt: BigInt
  ledger_lt: BigInt
  ledger_gte: BigInt
  ledger_lte: BigInt
  ledger_in: [BigInt!]
  ledger_not_in: [BigInt!]
  vol: BigInt
  vol_not: BigInt
  vol_gt: BigInt
  vol_lt: BigInt
  vol_gte: BigInt
  vol_lte: BigInt
  vol_in: [BigInt!]
  vol_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  date: String
  date_not: String
  date_gt: String
  date_lt: String
  date_gte: String
  date_lte: String
  date_in: [String!]
  date_not_in: [String!]
  date_contains: String
  date_contains_nocase: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VolumeFee_filter]
  or: [VolumeFee_filter]
}

enum VolumeFee_orderBy {
  id
  ledger
  vol
  fee
  date
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}